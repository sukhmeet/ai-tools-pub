#!/usr/bin/env python3
"""Cross-platform Claude account switcher for macOS and Linux"""

import argparse
import json
import os
import platform
import subprocess
import sys
from pathlib import Path


class ClaudeProfileManager:
    def __init__(self):
        self.profile_dir = Path.home() / ".claude-accounts"
        self.keychain_service = "Claude Code-credentials"
        self.linux_auth_file = Path.home() / ".claude" / ".credentials.json"
        self.os_type = self._detect_os()
    
    def _detect_os(self):
        """Detect the operating system"""
        system = platform.system()
        if system == "Darwin":
            return "macos"
        elif system == "Linux":
            return "linux"
        else:
            return "unknown"
    
    def _get_current_token(self):
        """Get current authentication token based on OS"""
        if self.os_type == "macos":
            try:
                result = subprocess.run([
                    "security", "find-generic-password", 
                    "-a", os.environ["USER"], 
                    "-s", self.keychain_service, 
                    "-w"
                ], capture_output=True, text=True, check=True)
                return result.stdout.strip()
            except subprocess.CalledProcessError:
                return None
        elif self.os_type == "linux":
            if self.linux_auth_file.exists():
                return self.linux_auth_file.read_text().strip()
            return None
        else:
            print("Unsupported OS", file=sys.stderr)
            return None
    
    def _set_current_token(self, token):
        """Set current authentication token based on OS"""
        if self.os_type == "macos":
            # Delete existing entry
            subprocess.run([
                "security", "delete-generic-password", 
                "-a", os.environ["USER"], 
                "-s", self.keychain_service
            ], capture_output=True)
            
            # Add new entry
            subprocess.run([
                "security", "add-generic-password", 
                "-a", os.environ["USER"], 
                "-s", self.keychain_service, 
                "-w", token
            ], capture_output=True, check=True)
        elif self.os_type == "linux":
            self.linux_auth_file.parent.mkdir(parents=True, exist_ok=True)
            self.linux_auth_file.write_text(token)
            self.linux_auth_file.chmod(0o600)
        else:
            print("Unsupported OS", file=sys.stderr)
            return False
        return True
    
    def _clear_current_token(self):
        """Clear current authentication token based on OS"""
        if self.os_type == "macos":
            subprocess.run([
                "security", "delete-generic-password", 
                "-a", os.environ["USER"], 
                "-s", self.keychain_service
            ], capture_output=True)
        elif self.os_type == "linux":
            self.linux_auth_file.unlink(missing_ok=True)
        else:
            print("Unsupported OS", file=sys.stderr)
            return False
        return True
    
    def save_profile(self, profile_name):
        """Save current authentication as a profile"""
        current_token = self._get_current_token()
        if not current_token:
            print("No current authentication found")
            return False
        
        self.profile_dir.mkdir(parents=True, exist_ok=True)
        profile_file = self.profile_dir / f"{profile_name}.json"
        
        profile_file.write_text(current_token)
        profile_file.chmod(0o600)
        
        print(f"Saved current authentication as profile: {profile_name}")
        return True
    
    def switch_profile(self, profile_name):
        """Switch to a saved profile"""
        profile_file = self.profile_dir / f"{profile_name}.json"
        
        if not profile_file.exists():
            print(f"Profile {profile_name} not found")
            return False
        
        token = profile_file.read_text().strip()
        if self._set_current_token(token):
            print(f"Switched to profile: {profile_name}")
            return True
        return False
    
    def cycle_profiles(self):
        """Cycle to the next available profile"""
        if not self.profile_dir.exists():
            print("No profiles found")
            return False
        
        # Get list of profiles
        profiles = sorted([f.stem for f in self.profile_dir.glob("*.json")])
        if not profiles:
            print("No profiles found")
            return False
        
        # Get current profile
        current_token = self._get_current_token()
        current_name = None
        
        if current_token:
            for profile_name in profiles:
                profile_file = self.profile_dir / f"{profile_name}.json"
                if profile_file.read_text().strip() == current_token:
                    current_name = profile_name
                    break
        
        # Find next profile
        if current_name and current_name in profiles:
            current_index = profiles.index(current_name)
            next_index = (current_index + 1) % len(profiles)
            next_profile = profiles[next_index]
        else:
            next_profile = profiles[0]
        
        # Switch to next profile
        profile_file = self.profile_dir / f"{next_profile}.json"
        token = profile_file.read_text().strip()
        
        if self._set_current_token(token):
            from_profile = current_name if current_name else "unknown"
            print(f"Cycled from profile: {from_profile} to: {next_profile}")
            return True
        return False
    
    def list_profiles(self):
        """List all saved profiles"""
        if not self.profile_dir.exists():
            print("No profiles found")
            return
        
        profiles = sorted([f.stem for f in self.profile_dir.glob("*.json")])
        if profiles:
            for profile in profiles:
                print(profile)
        else:
            print("No profiles found")
    
    def current_profile(self):
        """Show current profile"""
        current_token = self._get_current_token()
        if not current_token:
            print("No current authentication")
            return
        
        # Check which profile matches current token
        if self.profile_dir.exists():
            for profile_file in self.profile_dir.glob("*.json"):
                if profile_file.read_text().strip() == current_token:
                    print(profile_file.stem)
                    return
        
        print("unknown")


def main():
    parser = argparse.ArgumentParser(
        description="Cross-platform Claude account switcher for macOS and Linux"
    )
    
    # Add mutually exclusive group for commands
    group = parser.add_mutually_exclusive_group(required=True)
    
    # Save command
    group.add_argument("--save", metavar="PROFILE_NAME", help="Save current authentication as profile")
    
    # Switch command  
    group.add_argument("-s", "--switch", metavar="PROFILE_NAME", help="Switch to saved profile")
    
    # Cycle command
    group.add_argument("-c", "--cycle", action="store_true", help="Cycle to next available profile")
    
    # List command
    group.add_argument("-l", "--list", action="store_true", help="List all saved profiles")
    
    # Current command
    group.add_argument("--current", action="store_true", help="Show current profile")
    
    args = parser.parse_args()
    
    manager = ClaudeProfileManager()
    
    if args.save:
        success = manager.save_profile(args.save)
    elif args.switch:
        success = manager.switch_profile(args.switch)
    elif args.cycle:
        success = manager.cycle_profiles()
    elif args.list:
        manager.list_profiles()
        success = True
    elif args.current:
        manager.current_profile()
        success = True
    else:
        parser.print_help()
        return 1
    
    return 0 if success else 1


if __name__ == "__main__":
    sys.exit(main())